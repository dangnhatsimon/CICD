version: 2.1 
executors:
  deploy_container:
    docker:
      - image: cimg/python:3.11.1
    working_directory: ~/work

  node_container:
    docker:
      - image: cimg/node:18.14.2

orbs:
  aws-cli: circleci/aws-cli@3.1.4
  slack: circleci/slack@3.4.2

commands:
  lint_and_unit_test:
    steps:
      - run:
          name: lint and unit test
          command: |
            set -x
            echo "any lint and unit test command"

  deploy_to_fe_dev:
    steps:
      - run:
          name: deploy
          command: |
            set -x
            aws --version
            echo "any deploy command"
            
            cd client
            touch .env
            echo "DATABASE_URL=\"${DEV_DATABASE_URL}\"" >> .env

            docker-compose build

            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${DEV_AWS_ACCOUNT_NUMBER}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
            docker tag ${FE_DOCKER_IMAGE_NAME}:latest ${DEV_AWS_ACCOUNT_NUMBER}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${DEV_FE_ECR_REPO_NAME}:${CIRCLE_BUILD_NUM}
            docker push ${DEV_AWS_ACCOUNT_NUMBER}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${DEV_FE_ECR_REPO_NAME}:${CIRCLE_BUILD_NUM}
            ECR_ARN=${DEV_AWS_ACCOUNT_NUMBER}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${DEV_FE_ECR_REPO_NAME}:${CIRCLE_BUILD_NUM}

            sed -i -e "s@container_name_here@${DEV_FE_CONTAINER_NAME}@g" ./aws/task-definition.json
            sed -i -e "s@image_url_here@${ECR_ARN}@g" ./aws/task-definition.json
            sed -i -e "s@default_region_here@${AWS_DEFAULT_REGION}@g" ./aws/task-definition.json
            sed -i -e "s@taskdf_name_here@${DEV_ECS_FE_TASK_NAME}@g" ./aws/task-definition.json
            sed -i -e "s@role_arn_here@arn:aws:iam::${DEV_AWS_ACCOUNT_NUMBER}:role/${DEV_ESC_FE_TASK_ROLE}@g" ./aws/task-definition.json
            sed -i -e "s@log_prefix_here@${DEV_ESC_FE_SERVICE_NAME}_${CIRCLE_BUILD_NUM}@g" ./aws/task-definition.json
            aws ecs register-task-definition --cli-input-json file://aws/task-definition.json

            aws ecs update-service --cluster ${DEV_ECS_FE_CLUSTER_NAME} --service ${DEV_ESC_FE_SERVICE_NAME} --task-definition ${DEV_ECS_FE_TASK_NAME}

  deploy_to_be_dev:
    steps:
      - run:
          name: deploy
          command: |
            set -x
            aws --version
            echo "any deploy command"
            
            cd server

            docker-compose build

            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${DEV_AWS_ACCOUNT_NUMBER}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
            docker tag ${BE_DOCKER_IMAGE_NAME}:latest ${DEV_AWS_ACCOUNT_NUMBER}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${DEV_BE_ECR_REPO_NAME}:${CIRCLE_BUILD_NUM}
            docker push ${DEV_AWS_ACCOUNT_NUMBER}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${DEV_BE_ECR_REPO_NAME}:${CIRCLE_BUILD_NUM}
            ECR_ARN=${DEV_AWS_ACCOUNT_NUMBER}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${DEV_BE_ECR_REPO_NAME}:${CIRCLE_BUILD_NUM}

            sed -i -e "s@container_name_here@${DEV_BE_CONTAINER_NAME}@g" ./aws/task-definition.json
            sed -i -e "s@image_url_here@${ECR_ARN}@g" ./aws/task-definition.json
            sed -i -e "s@default_region_here@${AWS_DEFAULT_REGION}@g" ./aws/task-definition.json
            sed -i -e "s@taskdf_name_here@${DEV_ECS_BE_TASK_NAME}@g" ./aws/task-definition.json
            sed -i -e "s@role_arn_here@arn:aws:iam::${DEV_AWS_ACCOUNT_NUMBER}:role/${DEV_ESC_BE_TASK_ROLE}@g" ./aws/task-definition.json
            sed -i -e "s@log_prefix_here@${DEV_ESC_BE_SERVICE_NAME}_${CIRCLE_BUILD_NUM}@g" ./aws/task-definition.json
            aws ecs register-task-definition --cli-input-json file://aws/task-definition.json

            aws ecs update-service --cluster ${DEV_ECS_BE_CLUSTER_NAME} --service ${DEV_ESC_BE_SERVICE_NAME} --task-definition ${DEV_ECS_BE_TASK_NAME}

  deploy_to_fe_prod:
    steps:
      - run:
          name: deploy
          command: |
            set -x
            aws --version
            echo "any deploy command"
            
            cd client
            touch .env
            echo "DATABASE_URL=\"${PROD_DATABASE_URL}\"" >> .env
            sed -i -e "s@roomone-crm-dev@roomone-crm@g" ./next.config.js
            sed -i -e "s@dev@prod@g" ./aws/task-definition.json

            docker-compose build

            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${PROD_AWS_ACCOUNT_NUMBER}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
            docker tag ${FE_DOCKER_IMAGE_NAME}:latest ${PROD_AWS_ACCOUNT_NUMBER}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PROD_FE_ECR_REPO_NAME}:${CIRCLE_BUILD_NUM}
            docker push ${PROD_AWS_ACCOUNT_NUMBER}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PROD_FE_ECR_REPO_NAME}:${CIRCLE_BUILD_NUM}
            ECR_ARN=${PROD_AWS_ACCOUNT_NUMBER}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PROD_FE_ECR_REPO_NAME}:${CIRCLE_BUILD_NUM}

            sed -i -e "s@container_name_here@${PROD_FE_CONTAINER_NAME}@g" ./aws/task-definition.json
            sed -i -e "s@image_url_here@${ECR_ARN}@g" ./aws/task-definition.json
            sed -i -e "s@default_region_here@${AWS_DEFAULT_REGION}@g" ./aws/task-definition.json
            sed -i -e "s@taskdf_name_here@${PROD_ECS_FE_TASK_NAME}@g" ./aws/task-definition.json
            sed -i -e "s@role_arn_here@arn:aws:iam::${PROD_AWS_ACCOUNT_NUMBER}:role/${PROD_ESC_FE_TASK_ROLE}@g" ./aws/task-definition.json
            sed -i -e "s@log_prefix_here@${PROD_ESC_FE_SERVICE_NAME}_${CIRCLE_BUILD_NUM}@g" ./aws/task-definition.json
            aws ecs register-task-definition --cli-input-json file://aws/task-definition.json

            aws ecs update-service --cluster ${PROD_ECS_FE_CLUSTER_NAME} --service ${PROD_ESC_FE_SERVICE_NAME} --task-definition ${PROD_ECS_FE_TASK_NAME}

  deploy_to_be_prod:
    steps:
      - run:
          name: deploy
          command: |
            set -x
            aws --version
            echo "any deploy command"
            
            cd server
            sed -i -e "s@dev@prod@g" ./aws/task-definition.json

            docker-compose build

            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${PROD_AWS_ACCOUNT_NUMBER}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
            docker tag ${BE_DOCKER_IMAGE_NAME}:latest ${PROD_AWS_ACCOUNT_NUMBER}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PROD_BE_ECR_REPO_NAME}:${CIRCLE_BUILD_NUM}
            docker push ${PROD_AWS_ACCOUNT_NUMBER}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PROD_BE_ECR_REPO_NAME}:${CIRCLE_BUILD_NUM}
            ECR_ARN=${PROD_AWS_ACCOUNT_NUMBER}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PROD_BE_ECR_REPO_NAME}:${CIRCLE_BUILD_NUM}

            sed -i -e "s@container_name_here@${PROD_BE_CONTAINER_NAME}@g" ./aws/task-definition.json
            sed -i -e "s@image_url_here@${ECR_ARN}@g" ./aws/task-definition.json
            sed -i -e "s@default_region_here@${AWS_DEFAULT_REGION}@g" ./aws/task-definition.json
            sed -i -e "s@taskdf_name_here@${PROD_ECS_BE_TASK_NAME}@g" ./aws/task-definition.json
            sed -i -e "s@role_arn_here@arn:aws:iam::${PROD_AWS_ACCOUNT_NUMBER}:role/${PROD_ESC_BE_TASK_ROLE}@g" ./aws/task-definition.json
            sed -i -e "s@log_prefix_here@${PROD_ESC_BE_SERVICE_NAME}_${CIRCLE_BUILD_NUM}@g" ./aws/task-definition.json
            aws ecs register-task-definition --cli-input-json file://aws/task-definition.json

            aws ecs update-service --cluster ${PROD_ECS_BE_CLUSTER_NAME} --service ${PROD_ESC_BE_SERVICE_NAME} --task-definition ${PROD_ECS_BE_TASK_NAME}


jobs:
  lint_and_unit_test:
    executor: deploy_container
    steps:
      - checkout
      - lint_and_unit_test

  deploy_fe_develop_server:
    executor: deploy_container
    steps:
      - checkout
      - aws-cli/install
      - aws-cli/setup:
          profile-name: default
          aws-region: AWS_DEFAULT_REGION
          aws-access-key-id: DEV_AWS_ACCESS_KEY
          aws-secret-access-key: DEV_AWS_SECRET_ACCESS_KEY
      - setup_remote_docker
      - deploy_to_fe_dev
      - slack/status:
          fail_only: true
          mentions: 'here'
          failure_message: 'Error For Deploying FE develop server :rotating_light: \n :innocent: ${CIRCLE_USERNAME}     :branch: ${CIRCLE_BRANCH}'
          webhook: ${SLACK_WEBHOOK}
      - slack/notify:
          title: 'Sucess'
          color: '#42f486'
          message: 'Deployment DONE for FE develop server:sparkles: \n :grin: ${CIRCLE_USERNAME}   :branch: ${CIRCLE_BRANCH}'
          webhook: ${SLACK_WEBHOOK}

  deploy_be_develop_server:
      executor: deploy_container
      steps:
        - checkout
        - aws-cli/install
        - aws-cli/setup:
            profile-name: default
            aws-region: AWS_DEFAULT_REGION
            aws-access-key-id: DEV_AWS_ACCESS_KEY
            aws-secret-access-key: DEV_AWS_SECRET_ACCESS_KEY
        - setup_remote_docker
        - deploy_to_be_dev
        - slack/status:
            fail_only: true
            mentions: 'here'
            failure_message: 'Error For Deploying BE develop server :rotating_light: \n :innocent: ${CIRCLE_USERNAME}     :branch: ${CIRCLE_BRANCH}'
            webhook: ${SLACK_WEBHOOK}
        - slack/notify:
            title: 'Sucess'
            color: '#42f486'
            message: 'Deployment DONE for BE develop server:sparkles: \n :grin: ${CIRCLE_USERNAME}   :branch: ${CIRCLE_BRANCH}'
            webhook: ${SLACK_WEBHOOK}

  deploy_fe_production_server:
    executor: deploy_container
    steps:
      - checkout
      - aws-cli/install
      - aws-cli/setup:
          profile-name: default
          aws-region: AWS_DEFAULT_REGION
          aws-access-key-id: PROD_AWS_ACCESS_KEY
          aws-secret-access-key: PROD_AWS_SECRET_ACCESS_KEY
      - setup_remote_docker
      - deploy_to_fe_prod
      - slack/status:
          fail_only: true
          mentions: 'here'
          failure_message: 'Error For FE Deploying prod server:rotating_light: \n :innocent: ${CIRCLE_USERNAME}     :branch: ${CIRCLE_BRANCH}'
          webhook: ${SLACK_WEBHOOK}
      - slack/notify:
          title: 'Sucess'
          color: '#42f486'
          message: 'Deployment DONE for FE prod server :sparkles: \n :grin: ${CIRCLE_USERNAME}   :branch: ${CIRCLE_BRANCH}'
          webhook: ${SLACK_WEBHOOK}

  deploy_be_production_server:
      executor: deploy_container
      steps:
        - checkout
        - aws-cli/install
        - aws-cli/setup:
            profile-name: default
            aws-region: AWS_DEFAULT_REGION
            aws-access-key-id: PROD_AWS_ACCESS_KEY
            aws-secret-access-key: PROD_AWS_SECRET_ACCESS_KEY
        - setup_remote_docker
        - deploy_to_be_prod
        - slack/status:
            fail_only: true
            mentions: 'here'
            failure_message: 'Error For Deploying BE prod server:rotating_light: \n :innocent: ${CIRCLE_USERNAME}     :branch: ${CIRCLE_BRANCH}'
            webhook: ${SLACK_WEBHOOK}
        - slack/notify:
            title: 'Sucess'
            color: '#42f486'
            message: 'Deployment DONE for BE prod server :sparkles: \n :grin: ${CIRCLE_USERNAME}   :branch: ${CIRCLE_BRANCH}'
            webhook: ${SLACK_WEBHOOK}

  notify-approval:
    executor: deploy_container
    steps:
      - slack/approval:
          message: "本番環境へのデプロイを承認してください"
          mentions: "here"
          color: "#F5E911"
          webhook: ${SLACK_WEBHOOK}

  flask_server_lint:
    executor: deploy_container
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            python -m pip install --upgrade pip
            pip install flake8
      - run:
          name: Lint with flake8
          command: |
            cd server
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  next_test_build:
    executor: node_container
    steps:
      - checkout
      - run:
          name: yarn install and run
          command: |
            cd client
            yarn install
            yarn run build

workflows:
  version: 3
  client_and_server_build_test:
    jobs:
      - flask_server_lint
      - next_test_build

  ci-except-dev-master-branches:
    jobs:
      - lint_and_unit_test:
          filters:
            branches:
              ignore:
                - dev
                - master
  deploy-for-develpment-workflow:
    jobs:
      - lint_and_unit_test:
          filters:
            branches:
              only:
                - dev
            tags:
              only: /.*/
      - deploy_fe_develop_server:
          filters:
            branches:
              only:
                - dev
            tags:
              only: /.*/
      - deploy_be_develop_server:
          filters:
            branches:
              only:
                - dev
            tags:
              only: /.*/
  deploy-for-production-workflow:
    jobs:
      - lint_and_unit_test:
          filters:
            branches:
              only:
                - master
            tags:
              only: /.*/
      - notify-approval:
          filters:
            branches:
              only:
                - master
          requires:
                - lint_and_unit_test
      - approval:
          filters:
            branches:
              only:
                - master
          requires:
            - lint_and_unit_test
          type: approval
      - deploy_fe_production_server:
          requires:
            - approval
          filters:
            branches:
              only:
                - master
            tags:
              only: /.*/
      - deploy_be_production_server:
          requires:
            - approval
          filters:
            branches:
              only:
                - master
            tags:
              only: /.*/
