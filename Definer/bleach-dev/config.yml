version: 2.1
executors:
  deploy_container:
    docker:
      - image: cimg/python:3.11.1
    working_directory: ~/work

orbs:
  gcp-cli: circleci/gcp-cli@3.1.1
  gcp-gcr: circleci/gcp-gcr@0.15.3
  slack: circleci/slack@3.4.2

commands:
  deploy_to_be_dev:
    steps:
      - run:
          name: deploy
          command: |
            set -x
            echo "any deploy command"

            touch .env
            echo "ENV=\"dev\"" >> .env
            echo "DAGSTER_HOME=\"${DAGSTER_HOME}\"" >> .env
            echo "DAGSTER_PG_HOST=\"${DEV_DAGSTER_PG_HOST}\"" >> .env
            echo "DAGSTER_PG_PASSWORD=\"${DEV_DAGSTER_PG_PASSWORD}\"" >> .env

            echo 'export PATH=~$PATH:~/.local/bin' >> $BASH_ENV
            echo ${DEV_GCP_KEYS} | base64 --decode --ignore-garbage > $HOME/gcloud-service-key.json
            echo 'export DEV_GCP_KEYS=$(cat $HOME/gcloud-service-key.json)' >> $BASH_ENV

            docker-compose -f docker-compose-webserver.yml build
            docker tag ${WEBSERVER_DOCKER_IMAGE_NAME}:latest asia.gcr.io/${DEV_GCP_PROJECT_ID}/${DEV_WEBSERVER_DOCKER_IMAGE_NAME}:${CIRCLE_SHA1}

            docker-compose -f docker-compose-daemon.yml build
            docker tag ${DAEMON_DOCKER_IMAGE_NAME}:latest asia.gcr.io/${DEV_GCP_PROJECT_ID}/${DEV_DAEMON_DOCKER_IMAGE_NAME}:${CIRCLE_SHA1}

      - gcp-gcr/gcr-auth:
          gcloud-service-key: DEV_GCP_KEYS
          google-project-id: DEV_GCP_PROJECT_ID
          google-compute-region: GCP_DEFAULT_REGION

      - gcp-gcr/push-image:
          google-project-id: DEV_GCP_PROJECT_ID
          registry-url: 'asia.gcr.io'
          image: $DEV_WEBSERVER_DOCKER_IMAGE_NAME
          tag: $CIRCLE_SHA1

      - gcp-gcr/push-image:
          google-project-id: DEV_GCP_PROJECT_ID
          registry-url: 'asia.gcr.io'
          image: $DEV_DAEMON_DOCKER_IMAGE_NAME
          tag: $CIRCLE_SHA1

      - run:
          name: deploy to cloud run
          command: |
            gcloud beta run deploy --region=$GCP_DEFAULT_REGION \
              $DEV_DAGSTER_SERVICE_NAME \
              --container $WEB_SERVER_CONTAINER_NAME \
              --image asia.gcr.io/$DEV_GCP_PROJECT_ID/$DEV_WEBSERVER_DOCKER_IMAGE_NAME:$CIRCLE_SHA1 \
              --port $WEB_SERVER_CONTAINER_PORT \
              --container $DAEMON_CONTAINER_NAME \
              --image asia.gcr.io/$DEV_GCP_PROJECT_ID/$DEV_DAEMON_DOCKER_IMAGE_NAME:$CIRCLE_SHA1 \


deploy_to_be_prod:
  steps:
    - run:
        name: deploy
        command: |
          set -x
          echo "any deploy command"

          touch .env
          echo "ENV=\"prod\"" >> .env
          echo "DAGSTER_HOME=\"${DAGSTER_HOME}\"" >> .env
          echo "DAGSTER_PG_HOST=\"${PROD_DAGSTER_PG_HOST}\"" >> .env
          echo "DAGSTER_PG_PASSWORD=\"${PROD_DAGSTER_PG_PASSWORD}\"" >> .env

          echo 'export PATH=~$PATH:~/.local/bin' >> $BASH_ENV
          echo ${PROD_GCP_KEYS} | base64 --decode --ignore-garbage > $HOME/gcloud-service-key.json
          echo 'export PROD_GCP_KEYS=$(cat $HOME/gcloud-service-key.json)' >> $BASH_ENV

          docker-compose -f docker-compose-webserver.yml build
          docker tag ${WEBSERVER_DOCKER_IMAGE_NAME}:latest asia.gcr.io/${PROD_GCP_PROJECT_ID}/${PROD_WEBSERVER_DOCKER_IMAGE_NAME}:${CIRCLE_SHA1}

          docker-compose -f docker-compose-daemon.yml build
          docker tag ${DAEMON_DOCKER_IMAGE_NAME}:latest asia.gcr.io/${PROD_GCP_PROJECT_ID}/${PROD_DAEMON_DOCKER_IMAGE_NAME}:${CIRCLE_SHA1}

    - gcp-gcr/gcr-auth:
        gcloud-service-key: PROD_GCP_KEYS
        google-project-id: PROD_GCP_PROJECT_ID
        google-compute-zone: GCP_DEFAULT_REGION

    - gcp-gcr/push-image:
        google-project-id: PROD_GCP_PROJECT_ID
        registry-url: 'asia.gcr.io'
        image: $PROD_WEBSERVER_DOCKER_IMAGE_NAME
        tag: $CIRCLE_SHA1

    - gcp-gcr/push-image:
        google-project-id: PROD_GCP_PROJECT_ID
        registry-url: 'asia.gcr.io'
        image: $PROD_DAEMON_DOCKER_IMAGE_NAME
        tag: $CIRCLE_SHA1

    - run:
        name: deploy to cloud run
        command: |
          gcloud beta run deploy --region=$GCP_DEFAULT_REGION \
            $PROD_DAGSTER_SERVICE_NAME \
            --container $WEB_SERVER_CONTAINER_NAME \
            --image asia.gcr.io/$PROD_GCP_PROJECT_ID/$PROD_WEBSERVER_DOCKER_IMAGE_NAME:$CIRCLE_SHA1 \
            --port $WEB_SERVER_CONTAINER_PORT \
            --container $DAEMON_CONTAINER_NAME \
            --image asia.gcr.io/$PROD_GCP_PROJECT_ID/$PROD_DAEMON_DOCKER_IMAGE_NAME:$CIRCLE_SHA1 \

jobs:
  deploy_be_develop_server:
    executor: deploy_container
    steps:
      - checkout
      - gcp-cli/install
      - setup_remote_docker
      - deploy_to_be_dev
      - slack/status:
          fail_only: true
          mentions: 'here'
          failure_message: 'Error For Deploying BE develop server :rotating_light: \n :innocent: ${CIRCLE_USERNAME}     :branch: ${CIRCLE_BRANCH}'
          webhook: ${SLACK_WEBHOOK}
      - slack/notify:
          title: 'Sucess'
          color: '#42f486'
          message: 'Deployment DONE for BE develop server:sparkles: \n :grin: ${CIRCLE_USERNAME}   :branch: ${CIRCLE_BRANCH}'
          webhook: ${SLACK_WEBHOOK}

  deploy_be_production_server:
    executor: deploy_container
    steps:
      - checkout
      - gcp-cli/install
      - setup_remote_docker
      - deploy_to_be_prod
      - slack/status:
          fail_only: true
          mentions: 'here'
          failure_message: 'Error For Deploying BE prod server:rotating_light: \n :innocent: ${CIRCLE_USERNAME}     :branch: ${CIRCLE_BRANCH}'
          webhook: ${SLACK_WEBHOOK}
      - slack/notify:
          title: 'Sucess'
          color: '#42f486'
          message: 'Deployment DONE for BE prod server :sparkles: \n :grin: ${CIRCLE_USERNAME}   :branch: ${CIRCLE_BRANCH}'
          webhook: ${SLACK_WEBHOOK}

  flask_server_lint:
    executor: deploy_container
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            python -m pip install --upgrade pip
            pip install flake8
      - run:
          name: Lint with flake8
          command: |
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  notify-approval:
    executor: deploy_container
    steps:
      - slack/approval:
          message: '本番環境へのデプロイを承認してください'
          mentions: 'here'
          color: '#F5E911'
          webhook: ${SLACK_WEBHOOK}

workflows:
  version: 3
  client_and_server_build_test:
    jobs:
      - flask_server_lint
      
  deploy-for-develpment-workflow:
    jobs:
      - deploy_be_develop_server:
          filters:
            branches:
              only:
                - dev
            tags:
              only: /.*/
  # deploy-for-production-workflow:
  #   jobs:
  #     - notify-approval:
  #         filters:
  #           branches:
  #             only:
  #               - master
  #     - approval:
  #         filters:
  #           branches:
  #             only:
  #               - master
  #         requires:
  #           - notify-approval
  #         type: approval
  #     - deploy_be_production_server:
  #         requires:
  #           - approval
  #         filters:
  #           branches:
  #             only:
  #               - master
  #           tags:
  #             only: /.*/
